# name: workflow

# on:
#   push:
#     branches:
#       - main
#     paths-ignore:
#       - 'README.md'

# permission:
#   id-token: write
#   contents: read

# jobs:
#   integration:
#     name: Continous Integration
#     runs-on: unbuntu-latest
#     steps:
#       - name: Checkout Code
#         uses: actions.Checkout@v3

#       - name: Run unit tests
#         run: echo "Running unit tests"

#       - name: Run unit tests
#         run: echo "Running unit tests"

#   build-and-push-ecr-image:
#     name: Continous Delivery
#     needs: integration
#     runs-on: unbuntu-latest
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Install Utilities
#         run:
#           sudo apt-get-update
#           sudo apt-get install -y jq unzip
        
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Build, tag, and push image to Amazon ECR
#         id: build-image
#         env:
#           IMAGE_TAG: latest
#         run:
#           # Build a docker container and
#           # push it to ECR so that it can
#           # be deployed to ECS.
#           docker build -t ${{ secrets.AWS_ECR_REPO_URI }}:$IMAGE_TAG .
#           docker push ${{ secrets.AWS_ECR_REPO_URI }}:$IMAGE_TAG

#   Continous-Deployment:
#     needs: build-and-push-ecr-image
#     runs-on: self-hosted
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
#           aws-region: ${{ secrets.AWS_DEFAULT_REGION}}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Pull latest images
#         run:
#           docker pull ${{ secrets.AWS_ECR_REPO_URI }}:latest

#       # - name: Stop and remove visibility container if Running
#       #   run:
#       #     docker ps -q --filter "name=visibility" | grep -q . && docker stop visibility && docker rm -fv visibility

#       - name: Run Docker Image to server users
#         run:
#           docker run -d -p 8080:8080 --name=sensor -e 'MONGO_DB_URL=${{ secrets.MONGO_DB_URL }}' -e 'AWS_ACESS_KEY_ID'

#       - name: Clean previous images and containers
#         run:
#           docker system prune -f

name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          IMAGE_TAG: latest
        run: |
          docker build -t ${{ secrets.AWS_ECR_REPO_URI }}:$IMAGE_TAG .
          docker push ${{ secrets.AWS_ECR_REPO_URI }}:$IMAGE_TAG

  continuous-deployment:
    name: Continuous Deployment
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull latest image
        run: |
          docker pull ${{ secrets.AWS_ECR_REPO_URI }}:latest

      # Optional: Uncomment this if you want to clean up the old container
      # - name: Stop and remove old container
      #   run: |
      #     docker ps -q --filter "name=sensor" | grep -q . && docker stop sensor && docker rm -fv sensor

      - name: Run Docker Image to serve users
        run: |
          docker run -d -p 8080:8080 --name=sensor \
          -e MONGO_DB_URL='${{ secrets.MONGO_DB_URL }}' \
          -e AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}' \
          ${{ secrets.AWS_ECR_REPO_URI }}:latest

      - name: Clean up unused images and containers
        run: |
          docker system prune -f









